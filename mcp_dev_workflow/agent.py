#!/usr/bin/env python3
"""
Multi-Agent Development Workflow with MCP Server Integration
===========================================================

This example demonstrates a sophisticated multi-agent system that integrates with
MCP (Model Context Protocol) servers to handle the complete development workflow:

1. Spec Reader Agent - Reads and analyzes specifications using MCP file operations
2. Code Generator Agent - Writes implementation code with MCP-enhanced capabilities
3. Test Generator Agent - Creates comprehensive tests using MCP tools
4. Build Agent - Builds and compiles code using MCP build tools
5. Test Runner Agent - Executes tests using MCP test execution tools
6. Git Agent - Manages version control using MCP git operations
7. Coordinator Agent - Orchestrates the workflow with MCP coordination

The system leverages MCP servers for enhanced file operations, build tools,
testing frameworks, and development environment management.
"""

from datetime import datetime
import json
import os
import subprocess
import tempfile
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

from google.adk.agents.llm_agent import LlmAgent
from google.adk.agents.parallel_agent import ParallelAgent
from google.adk.agents.sequential_agent import SequentialAgent
from google.adk.models.github_copilot_llm import GitHubCopilotLlm
from google.adk.tools.function_tool import FunctionTool
from google.adk.tools.mcp_tool import MCPToolset
from google.adk.tools.mcp_tool import StdioConnectionParams
from google.genai import types
from mcp import StdioServerParameters

# =============================================================================
# MCP SERVER CONFIGURATION AND UTILITIES
# =============================================================================


def get_mcp_filesystem_config() -> Dict[str, Any]:
    """Get configuration for MCP filesystem server."""
    return {
        "command": "python",
        "args": ["-m", "mcp_filesystem_server"],
        "env": {"ALLOWED_DIRECTORIES": os.getcwd(), "MAX_FILE_SIZE": "10MB"},
    }


def get_mcp_build_config() -> Dict[str, Any]:
    """Get configuration for MCP build server."""
    return {
        "command": "python",
        "args": ["-m", "mcp_build_server"],
        "env": {
            "BUILD_TIMEOUT": "300",
            "ALLOWED_COMMANDS": "pip,python,pytest,mypy,black,isort",
        },
    }


def get_mcp_git_config() -> Dict[str, Any]:
    """Get configuration for MCP git server."""
    return {
        "command": "python",
        "args": ["-m", "mcp_git_server"],
        "env": {
            "GIT_TIMEOUT": "60",
            "ALLOWED_OPERATIONS": "init,add,commit,status,log",
        },
    }


# =============================================================================
# UTILITY FUNCTIONS FOR DEVELOPMENT WORKFLOW
# =============================================================================


def create_project_structure(project_name: str, base_path: str = ".") -> str:
    """Create a basic project directory structure."""
    try:
        project_path = os.path.join(base_path, project_name)
        os.makedirs(project_path, exist_ok=True)
        os.makedirs(os.path.join(project_path, "src"), exist_ok=True)
        os.makedirs(os.path.join(project_path, "tests"), exist_ok=True)
        os.makedirs(os.path.join(project_path, "docs"), exist_ok=True)

        # Create basic files
        with open(os.path.join(project_path, "README.md"), "w") as f:
            f.write(
                f"# {project_name}\n\nProject generated by MCP Multi-Agent System\n"
            )

        with open(os.path.join(project_path, "requirements.txt"), "w") as f:
            f.write(
                "# Project dependencies\npytest>=7.0.0\nmypy>=1.0.0\nblack>=22.0.0\n"
            )

        with open(os.path.join(project_path, "pyproject.toml"), "w") as f:
            f.write(
                f"""[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{project_name}"
version = "0.1.0"
description = "Generated by MCP Multi-Agent System"
authors = [{{name = "MCP Agent", email = "agent@example.com"}}]
dependencies = []

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.black]
line-length = 88
target-version = ['py38']
"""
            )

        return f"Created project structure at {project_path}"
    except Exception as e:
        return f"Error creating project structure: {str(e)}"


def validate_python_syntax(file_path: str) -> str:
    """Validate Python syntax for a file."""
    try:
        with open(file_path, "r") as f:
            code = f.read()

        compile(code, file_path, "exec")
        return f"✅ Syntax validation passed for {file_path}"
    except SyntaxError as e:
        return f"❌ Syntax error in {file_path}: {e}"
    except Exception as e:
        return f"❌ Error validating {file_path}: {e}"


def analyze_code_quality(file_path: str) -> str:
    """Analyze code quality using basic metrics."""
    try:
        with open(file_path, "r") as f:
            lines = f.readlines()

        total_lines = len(lines)
        code_lines = len(
            [
                line
                for line in lines
                if line.strip() and not line.strip().startswith("#")
            ]
        )
        comment_lines = len([line for line in lines if line.strip().startswith("#")])
        blank_lines = total_lines - code_lines - comment_lines

        # Calculate basic metrics
        comment_ratio = comment_lines / total_lines if total_lines > 0 else 0

        quality_report = f"""Code Quality Analysis for {file_path}:
- Total lines: {total_lines}
- Code lines: {code_lines}
- Comment lines: {comment_lines}
- Blank lines: {blank_lines}
- Comment ratio: {comment_ratio:.2%}
"""

        if comment_ratio < 0.1:
            quality_report += (
                "⚠️  Low comment ratio - consider adding more documentation\n"
            )
        else:
            quality_report += "✅ Good comment ratio\n"

        return quality_report

    except Exception as e:
        return f"Error analyzing code quality: {str(e)}"


# =============================================================================
# MCP TOOLSETS FOR DIFFERENT OPERATIONS
# =============================================================================

# MCP Toolsets - Now available with implemented servers
mcp_filesystem_toolset = MCPToolset(
    connection_params=StdioConnectionParams(
        server_params=StdioServerParameters(
            command="python",
            args=[os.path.join(os.getcwd(), "mcp_filesystem_server.py")],
            env={"ALLOWED_DIRECTORIES": os.getcwd(), "MAX_FILE_SIZE": "10485760"},
        )
    )
)

mcp_build_toolset = MCPToolset(
    connection_params=StdioConnectionParams(
        server_params=StdioServerParameters(
            command="python",
            args=[os.path.join(os.getcwd(), "mcp_build_server.py")],
            env={
                "BUILD_TIMEOUT": "300",
                "ALLOWED_COMMANDS": "pip,python,pytest,mypy,black,isort,flake8",
            },
        )
    )
)

mcp_git_toolset = MCPToolset(
    connection_params=StdioConnectionParams(
        server_params=StdioServerParameters(
            command="python",
            args=[os.path.join(os.getcwd(), "mcp_git_server.py")],
            env={
                "GIT_TIMEOUT": "60",
                "ALLOWED_OPERATIONS": "init,add,commit,status,log,diff,branch,checkout",
            },
        )
    )
)


# =============================================================================
# SPECIALIZED AGENTS FOR MCP-ENHANCED DEVELOPMENT WORKFLOW
# =============================================================================

# 1. Specification Reader Agent with MCP File Operations
spec_reader_agent = LlmAgent(
    name="mcp_spec_reader_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Analyzes specifications using MCP file operations",
    instruction="""
    You are a Software Requirements Analyst with enhanced file operation capabilities 
    through MCP (Model Context Protocol) servers.
    
    Your responsibilities:
    1. Read specification files using MCP file operations
    2. Analyze requirements and extract key features
    3. Create project structure using MCP filesystem tools
    4. Generate development plans and architecture decisions
    5. Validate specification completeness and clarity
    
    MCP Capabilities Available:
    - Advanced file reading and parsing
    - Directory structure creation and management
    - File metadata extraction and analysis
    - Cross-reference validation between specification files
    
    When processing specifications:
    - Use MCP file tools for robust file operations
    - Extract functional and non-functional requirements
    - Identify technology stack and dependencies
    - Create comprehensive project structure
    - Validate specification against best practices
    
    Provide structured analysis that other agents can use for implementation.
    """,
    tools=[FunctionTool(create_project_structure), mcp_filesystem_toolset],
    output_key="specification_analysis",
)

# 2. Code Generator Agent with MCP-Enhanced Capabilities
code_generator_agent = LlmAgent(
    name="mcp_code_generator_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Generates code using MCP-enhanced development tools",
    instruction="""
    You are a Senior Software Developer with access to advanced development tools
    through MCP servers.
    
    Based on specification analysis: {specification_analysis}
    
    Your responsibilities:
    1. Generate high-quality implementation code
    2. Use MCP file operations for code creation and management
    3. Implement proper error handling and validation
    4. Follow coding standards and best practices
    5. Create modular, maintainable code architecture
    
    MCP Capabilities Available:
    - Advanced file creation and editing
    - Code template generation and management
    - Syntax validation and formatting
    - Dependency management and imports
    - Code organization and structure optimization
    
    Code Quality Guidelines:
    - Use clear, descriptive naming conventions
    - Implement comprehensive error handling
    - Add detailed docstrings and type hints
    - Follow PEP 8 and language-specific standards
    - Create modular, reusable components
    - Include proper logging and debugging support
    
    Generate production-ready code that implements all specified requirements.
    """,
    tools=[
        FunctionTool(validate_python_syntax),
        FunctionTool(analyze_code_quality),
        mcp_filesystem_toolset,
    ],
    output_key="implementation_code",
)

# 3. Test Generator Agent with MCP Testing Tools
test_generator_agent = LlmAgent(
    name="mcp_test_generator_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Creates comprehensive tests using MCP testing frameworks",
    instruction="""
    You are a Test Engineer with access to advanced testing tools through MCP servers.
    
    Your responsibilities:
    1. Create comprehensive test suites using MCP testing tools
    2. Generate unit, integration, and end-to-end tests
    3. Implement test fixtures and mock objects
    4. Create performance and load tests where appropriate
    5. Ensure high test coverage (>90%)
    
    MCP Testing Capabilities:
    - Advanced test framework integration
    - Automated test generation and scaffolding
    - Test data management and fixtures
    - Coverage analysis and reporting
    - Test execution and result analysis
    
    Test Guidelines:
    - Use pytest framework with clear test structure
    - Create descriptive test names and documentation
    - Test both positive and negative scenarios
    - Include edge cases and boundary conditions
    - Use appropriate mocking and fixtures
    - Implement parametrized tests for multiple scenarios
    - Test error handling and exception cases
    
    Generate a complete test suite that thoroughly validates the implementation.
    """,
    tools=[mcp_filesystem_toolset, mcp_build_toolset],
    output_key="test_suite",
)

# 4. Build Agent with MCP Build Tools
build_agent = LlmAgent(
    name="mcp_build_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Handles building and compilation using MCP build tools",
    instruction="""
    You are a Build Engineer with access to advanced build tools through MCP servers.
    
    Based on:
    - Implementation Code: {implementation_code}
    - Test Suite: {test_suite}
    
    Your responsibilities:
    1. Build and compile the project using MCP build tools
    2. Manage dependencies and virtual environments
    3. Run code quality checks and linting
    4. Validate imports and module structure
    5. Generate build reports and artifacts
    
    MCP Build Capabilities:
    - Advanced build system integration
    - Dependency resolution and management
    - Code quality analysis and linting
    - Build artifact generation
    - Environment management and isolation
    
    Build Process:
    - Install and validate all dependencies
    - Run syntax and import validation
    - Execute code quality checks (mypy, black, isort)
    - Generate build artifacts and documentation
    - Create deployment packages if needed
    - Report build status and any issues
    
    Provide detailed build reports and recommendations for any issues found.
    """,
    tools=[mcp_build_toolset, mcp_filesystem_toolset],
    output_key="build_results",
)

# 5. Test Runner Agent with MCP Test Execution
test_runner_agent = LlmAgent(
    name="mcp_test_runner_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Executes tests using MCP test execution tools",
    instruction="""
    You are a Quality Assurance Engineer with access to advanced test execution
    tools through MCP servers.
    
    Based on:
    - Build Results: {build_results}
    - Test Suite: {test_suite}
    
    Your responsibilities:
    1. Execute comprehensive test suites using MCP test tools
    2. Generate detailed test reports and coverage analysis
    3. Identify and analyze test failures
    4. Run performance and load tests
    5. Validate code quality and standards compliance
    
    MCP Test Execution Capabilities:
    - Advanced test runner integration
    - Parallel test execution and optimization
    - Coverage analysis and reporting
    - Performance profiling and benchmarking
    - Test result analysis and visualization
    
    Test Execution Process:
    - Run unit tests with coverage analysis
    - Execute integration and end-to-end tests
    - Perform code quality validation
    - Generate comprehensive test reports
    - Analyze performance metrics
    - Identify areas for improvement
    
    Only proceed to next steps if tests pass or provide clear guidance for fixes.
    """,
    tools=[mcp_build_toolset, mcp_filesystem_toolset],
    output_key="test_results",
)

# 6. Git Agent with MCP Version Control
git_agent = LlmAgent(
    name="mcp_git_agent",
    model=GitHubCopilotLlm(model="github_copilot/gpt-4o"),
    description="Manages version control using MCP git operations",
    instruction="""
    You are a DevOps Engineer with access to advanced version control tools
    through MCP servers.
    
    Your responsibilities:
    1. Initialize and manage git repositories using MCP git tools
    2. Create meaningful commits with proper messages
    3. Manage branches and merge strategies
    4. Generate changelogs and release notes
    5. Handle git workflows and best practices
    
    MCP Git Capabilities:
    - Advanced git operation integration
    - Automated commit message generation
    - Branch management and merging
    - Conflict resolution assistance
    - Repository analysis and reporting
    
    Version Control Best Practices:
    - Initialize repository with proper .gitignore
    - Create descriptive commit messages following conventions
    - Stage files appropriately (exclude build artifacts)
    - Generate meaningful changelogs
    - Tag releases with semantic versioning
    - Document repository structure and workflows
    
    Only commit if tests pass and code quality meets standards.
    """,
    tools=[mcp_git_toolset, mcp_filesystem_toolset],
    output_key="git_results",
)

# 7. MCP Workflow Coordinator - Sequential Agent
mcp_coordinator_agent = SequentialAgent(
    name="mcp_dev_workflow_coordinator",
    description="Coordinates MCP-enhanced development workflow in sequential order",
    sub_agents=[
        spec_reader_agent,
        code_generator_agent,
        test_generator_agent,
        build_agent,
        test_runner_agent,
        git_agent,
    ],
)

# Export the root agent for ADK
root_agent = mcp_coordinator_agent
agent = mcp_coordinator_agent  # Keep for backward compatibility
